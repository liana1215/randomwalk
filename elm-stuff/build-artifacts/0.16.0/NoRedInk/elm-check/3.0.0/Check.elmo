Elm.Check = Elm.Check || {};
Elm.Check.make = function (_elm) {
   "use strict";
   _elm.Check = _elm.Check || {};
   if (_elm.Check.values) return _elm.Check.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Check$Producer = Elm.Check.Producer.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Lazy$List = Elm.Lazy.List.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Random = Elm.Random.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Trampoline = Elm.Trampoline.make(_elm);
   var _op = {};
   var $false = F2(function (f,pred) {    return A2(f,pred,$Basics.always(false));});
   var $true = F2(function (f,pred) {    return A2(f,pred,$Basics.always(true));});
   var $for = F2(function (f,x) {    return f(x);});
   var is = F2(function (f,x) {    return f(x);});
   var that = F2(function (f,x) {    return f(x);});
   var FailureOptions = F8(function (a,b,c,d,e,f,g,h) {
      return {name: a,counterExample: b,actual: c,expected: d,original: e,seed: f,numberOfChecks: g,numberOfShrinks: h};
   });
   var SuccessOptions = F3(function (a,b,c) {    return {name: a,seed: b,numberOfChecks: c};});
   var Multiple = F2(function (a,b) {    return {ctor: "Multiple",_0: a,_1: b};});
   var check = F3(function (n,seed,claim) {
      var _p0 = claim;
      if (_p0.ctor === "Claim") {
            return A2(_p0._1,n,seed);
         } else {
            return A2(Multiple,_p0._0,A2($List.map,A2(check,n,seed),_p0._1));
         }
   });
   var quickCheck = A2(check,100,$Random.initialSeed(1));
   var Unit = function (a) {    return {ctor: "Unit",_0: a};};
   var Suite = F2(function (a,b) {    return {ctor: "Suite",_0: a,_1: b};});
   var suite = F2(function (name,claims) {    return A2(Suite,name,claims);});
   var Claim = F2(function (a,b) {    return {ctor: "Claim",_0: a,_1: b};});
   var claim = F4(function (name,actualStatement,expectedStatement,producer) {
      return A2(Claim,
      name,
      F2(function (numberOfChecks,seed) {
         var originalCounterExample$ = F2(function (seed,currentNumberOfChecks) {
            if (_U.cmp(currentNumberOfChecks,numberOfChecks) > -1) return $Trampoline.Done($Result.Ok(numberOfChecks)); else {
                  var _p1 = A2($Random.generate,producer.generator,seed);
                  var value = _p1._0;
                  var nextSeed = _p1._1;
                  var actual = actualStatement(value);
                  var expected = expectedStatement(value);
                  return _U.eq(actual,expected) ? $Trampoline.Continue(function (_p2) {
                     var _p3 = _p2;
                     return A2(originalCounterExample$,nextSeed,currentNumberOfChecks + 1);
                  }) : $Trampoline.Done($Result.Err({ctor: "_Tuple5",_0: value,_1: actual,_2: expected,_3: nextSeed,_4: currentNumberOfChecks + 1}));
               }
         });
         var originalCounterExample = $Trampoline.trampoline(A2(originalCounterExample$,seed,0));
         var _p4 = originalCounterExample;
         if (_p4.ctor === "Ok") {
               return Unit($Result.Ok({name: name,seed: seed,numberOfChecks: A2($Basics.max,0,_p4._0)}));
            } else {
               var _p9 = _p4._0._0;
               var shrink = F2(function (counterExample,currentNumberOfShrinks) {
                  var shrunkenCounterExamples = producer.shrinker(counterExample);
                  var failingShrunkenCounterExamples = A2($Lazy$List.keepIf,
                  function (shrunk) {
                     return $Basics.not(_U.eq(actualStatement(shrunk),expectedStatement(shrunk)));
                  },
                  shrunkenCounterExamples);
                  var _p5 = $Lazy$List.head(failingShrunkenCounterExamples);
                  if (_p5.ctor === "Nothing") {
                        return $Trampoline.Done({ctor: "_Tuple2",_0: counterExample,_1: currentNumberOfShrinks});
                     } else {
                        return $Trampoline.Continue(function (_p6) {    var _p7 = _p6;return A2(shrink,_p5._0,currentNumberOfShrinks + 1);});
                     }
               });
               var _p8 = $Trampoline.trampoline(A2(shrink,_p9,0));
               var minimal = _p8._0;
               var numberOfShrinks = _p8._1;
               var actual = actualStatement(minimal);
               var expected = expectedStatement(minimal);
               return Unit($Result.Err({name: name
                                       ,seed: _p4._0._3
                                       ,counterExample: $Basics.toString(minimal)
                                       ,expected: $Basics.toString(expected)
                                       ,actual: $Basics.toString(actual)
                                       ,original: {counterExample: $Basics.toString(_p9)
                                                  ,actual: $Basics.toString(_p4._0._1)
                                                  ,expected: $Basics.toString(_p4._0._2)}
                                       ,numberOfChecks: _p4._0._4
                                       ,numberOfShrinks: numberOfShrinks}));
            }
      }));
   });
   return _elm.Check.values = {_op: _op
                              ,Claim: Claim
                              ,Suite: Suite
                              ,Unit: Unit
                              ,Multiple: Multiple
                              ,SuccessOptions: SuccessOptions
                              ,FailureOptions: FailureOptions
                              ,claim: claim
                              ,check: check
                              ,quickCheck: quickCheck
                              ,suite: suite
                              ,that: that
                              ,is: is
                              ,$for: $for
                              ,$true: $true
                              ,$false: $false};
};