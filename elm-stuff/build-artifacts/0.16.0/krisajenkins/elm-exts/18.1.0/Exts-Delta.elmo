Elm.Exts = Elm.Exts || {};
Elm.Exts.Delta = Elm.Exts.Delta || {};
Elm.Exts.Delta.make = function (_elm) {
   "use strict";
   _elm.Exts = _elm.Exts || {};
   _elm.Exts.Delta = _elm.Exts.Delta || {};
   if (_elm.Exts.Delta.values) return _elm.Exts.Delta.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var empty = {entering: _U.list([]),continuing: _U.list([]),leaving: _U.list([])};
   var Delta = F3(function (a,b,c) {    return {entering: a,continuing: b,leaving: c};});
   var listContains = function (x) {    return $List.any(F2(function (x,y) {    return _U.eq(x,y);})(x));};
   var intersect = F2(function (xs,ys) {    return A2($List.filter,function (x) {    return A2(listContains,x,ys);},xs);});
   var filter = F2(function (p,xs) {
      filter: while (true) {
         var _p0 = xs;
         if (_p0.ctor === "[]") {
               return _U.list([]);
            } else {
               var _p2 = _p0._1;
               var _p1 = _p0._0;
               if (p(_p1)) return A2($List._op["::"],_p1,A2(filter,p,_p2)); else {
                     var _v1 = p,_v2 = _p2;
                     p = _v1;
                     xs = _v2;
                     continue filter;
                  }
            }
      }
   });
   var remove = function (p) {    return filter(function (_p3) {    return $Basics.not(p(_p3));});};
   var diff = F2(function (xs,ys) {    return A2(remove,function (x) {    return A2(listContains,x,ys);},xs);});
   var union = F2(function (xs,ys) {    return A2($List.append,xs,A2(diff,ys,xs));});
   var generation = F2(function (xs,ds) {
      var actives = A2(union,ds.entering,ds.continuing);
      var newEntries = A2(diff,xs,actives);
      var newLeavers = A2(diff,actives,xs);
      var newContinuers = A2(intersect,xs,actives);
      return _U.update(empty,{entering: newEntries,continuing: newContinuers,leaving: newLeavers});
   });
   return _elm.Exts.Delta.values = {_op: _op,empty: empty,generation: generation,Delta: Delta};
};