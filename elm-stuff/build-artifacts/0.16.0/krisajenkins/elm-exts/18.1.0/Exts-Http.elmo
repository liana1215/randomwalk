Elm.Exts = Elm.Exts || {};
Elm.Exts.Http = Elm.Exts.Http || {};
Elm.Exts.Http.make = function (_elm) {
   "use strict";
   _elm.Exts = _elm.Exts || {};
   _elm.Exts.Http = _elm.Exts.Http || {};
   if (_elm.Exts.Http.values) return _elm.Exts.Http.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Http = Elm.Http.make(_elm),
   $Json$Decode = Elm.Json.Decode.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Task = Elm.Task.make(_elm);
   var _op = {};
   var postContent = F4(function (contentType,decoder,url,body) {
      var request = {verb: "POST",headers: _U.list([{ctor: "_Tuple2",_0: "Content-Type",_1: contentType}]),url: url,body: body};
      return A2($Http.fromJson,decoder,A2($Http.send,$Http.defaultSettings,request));
   });
   var postForm = postContent("application/x-www-form-urlencoded");
   var postJson = postContent("application/json");
   var put = F3(function (decoder,url,body) {
      var request = {verb: "PUT",headers: _U.list([]),url: url,body: body};
      return A2($Http.fromJson,decoder,A2($Http.send,$Http.defaultSettings,request));
   });
   var checkStatus = function (response) {
      return _U.cmp(200,response.status) < 1 && _U.cmp(response.status,300) < 0 ? $Task.succeed(response) : $Task.fail(A2($Http.BadResponse,
      response.status,
      response.statusText));
   };
   var promoteError = function (rawError) {
      var _p0 = rawError;
      if (_p0.ctor === "RawTimeout") {
            return $Http.Timeout;
         } else {
            return $Http.NetworkError;
         }
   };
   var handleError = function (t) {    return A2($Task.andThen,A2($Task.mapError,promoteError,t),checkStatus);};
   return _elm.Exts.Http.values = {_op: _op,put: put,postContent: postContent,postForm: postForm,postJson: postJson,handleError: handleError};
};