Elm.Exts = Elm.Exts || {};
Elm.Exts.Json = Elm.Exts.Json || {};
Elm.Exts.Json.Encode = Elm.Exts.Json.Encode || {};
Elm.Exts.Json.Encode.make = function (_elm) {
   "use strict";
   _elm.Exts = _elm.Exts || {};
   _elm.Exts.Json = _elm.Exts.Json || {};
   _elm.Exts.Json.Encode = _elm.Exts.Json.Encode || {};
   if (_elm.Exts.Json.Encode.values) return _elm.Exts.Json.Encode.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Dict = Elm.Dict.make(_elm),
   $Json$Encode = Elm.Json.Encode.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Set = Elm.Set.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var tuple2 = F3(function (encodeKey,encodeValue,_p0) {    var _p1 = _p0;return $Json$Encode.list(_U.list([encodeKey(_p1._0),encodeValue(_p1._1)]));});
   var dict = F2(function (encodeKey,encodeValue) {
      return function (_p2) {
         return $Json$Encode.list(A2($List.map,A2(tuple2,encodeKey,encodeValue),$Dict.toList(_p2)));
      };
   });
   var set = function (encodeElement) {    return function (_p3) {    return $Json$Encode.list(A2($List.map,encodeElement,$List.sort($Set.toList(_p3))));};};
   return _elm.Exts.Json.Encode.values = {_op: _op,set: set,tuple2: tuple2,dict: dict};
};