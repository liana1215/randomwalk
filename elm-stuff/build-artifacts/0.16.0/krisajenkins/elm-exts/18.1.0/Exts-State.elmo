Elm.Exts = Elm.Exts || {};
Elm.Exts.State = Elm.Exts.State || {};
Elm.Exts.State.make = function (_elm) {
   "use strict";
   _elm.Exts = _elm.Exts || {};
   _elm.Exts.State = _elm.Exts.State || {};
   if (_elm.Exts.State.values) return _elm.Exts.State.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Effects = Elm.Effects.make(_elm),
   $Focus = Elm.Focus.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var subUpdate = F5(function (subModuleUpdate,subModelFocus,actionWrapper,subaction,model) {
      var _p0 = A2(subModuleUpdate,subaction,A2($Focus.get,subModelFocus,model));
      var newSubmodel = _p0._0;
      var newSubeffects = _p0._1;
      return {ctor: "_Tuple2",_0: A3($Focus.set,subModelFocus,newSubmodel,model),_1: A2($Effects.map,actionWrapper,newSubeffects)};
   });
   return _elm.Exts.State.values = {_op: _op,subUpdate: subUpdate};
};