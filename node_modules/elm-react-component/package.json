{
  "name": "elm-react-component",
  "version": "0.4.1",
  "description": "A component-wrapper to embed Elm modules in React.js",
  "main": "dist/elm-react-commonjs.js",
  "scripts": {
    "test": "mocha --compilers js:babel-core/register",
    "build-browser": "webpack --config webpack.browser.config.js -p",
    "build-commonjs": "webpack --config webpack.commonjs.config.js -p"
  },
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/KtorZ/elm-react-component.git"
  },
  "keywords": [
    "elm",
    "react",
    "react-component",
    "embedded",
    "embed"
  ],
  "author": {
    "name": "Matthias Benkort"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/KtorZ/elm-react-component/issues"
  },
  "homepage": "https://github.com/KtorZ/elm-react-component#readme",
  "devDependencies": {
    "babel": "^6.3.26",
    "babel-core": "^6.4.5",
    "babel-loader": "^6.2.1",
    "babel-preset-es2015": "^6.3.13",
    "babel-preset-react": "^6.3.13",
    "expect.js": "^0.3.1",
    "mocha": "^2.4.4",
    "react": "^0.14.6",
    "react-dom": "^0.14.6",
    "webpack": "^1.12.12"
  },
  "babel": {
    "presets": [
      "es2015",
      "react"
    ]
  },
  "readme": "Elm-React ![travis](https://travis-ci.org/KtorZ/elm-react-component.svg?style=flat-square) ![license](https://img.shields.io/badge/License-MIT-blue.svg?style=flat-square)\n=========\n\nThis component allows you to easily integrate an `Elm` module into an existing `React`\napplication. This can be useful to slightly refactor a legacy code base or simply to just run\nsome part of an application using `Elm`.\n\n## Installation\n\n```\nnpm install --save elm-react-component\n```\n\n## Examples\n\n- [Basic](http://KtorZ.github.io/elm-react-component/basic/)\n\n## Usage\n\nThe component is a plain `React` component which means that it can be integrated like any other\ncomponent. \n\n```js\n  ReactDOM.render(\n    <ElmReact name=\"Main\" />,\n    document.getElementById('app')\n  );\n```\n\nThe component requires at least one property `name` which is the name of your `Elm` module. So\nfar, there's no dynamic loading; you have to include your `Elm` module and either make the `Elm`\nobject be available in the global scope or supply it as a component's property.\n\nThen, for each `out-port`, from `Elm` to `React`, you may pass as many `on[PortName]`\nproperties as you need. Those properties should be functions -- or callback, triggered when a\nnew message is spit out by the signal. \n\nAny other property will be used as `in-port` from `React` to `Elm` to communicate. Each time a\nproperty is set with a new value, that value is sent to the corresponding port to the `Elm`\nmodule. \n\nCheck out the examples for more details, but basically:\n\nproperty               |      type      |     description\n-----------------------|----------------|------------------------\nname                   | string         | `Elm` module's name\non{OutPort}            | function       | Subscriber / Handler for the given out port\n{inPort}               | any            | Value to be sent through the module in port\n[optional] *elm*       | object         | The Elm object dependency. If not supplied, looks for a global `Elm`\n[optional] *id*        | string         | Id to assign to the `Elm`'s div container\n[optional] *className* | string         | Class to assign to the `Elm`'s div container\n\n## Example\n\n**Elm module 'Main'**\n```elm\nimport Graphics.Element exposing (..)\nimport Signal\nimport Mouse\n\nmain : Signal Element\nmain =\n  Signal.map (\\i -> flow right [show \"in:\", show i]) inPort\n\nport inPort : Signal Int\n\nport outPort : Signal Int\nport outPort =\n  Signal.map fst Mouse.position\n```\n\n**React application**\n```js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nlet App = React.createClass({\n  getInitialState() {\n    return { inPort: 0 }\n  },\n\n  log(e) {\n    console.log(\"onOutPort:\", e)\n  },\n\n  render() {\n    setTimeout(() => {\n      this.setState({ inPort: Date.now() })\n    }, 50)\n\n    return (\n      <ElmReact\n        name=\"Main\"\n        onOutPort={this.log}\n        inPort={this.state.inPort}\n      />\n    )\n  }\n})\n\nReactDOM.render(\n    <App />,\n    document.getElementById('app')\n)\n```\n\n## TODO\n\n- Properly test the component\n- Explore some other use cases and real-life examples\n\n## Contributing\n\nAny ideas ? Feel free to open an issue ! \n\n## Change log\n\n#### 0.4.0 (2016-02-21)\n\n- Allow `Elm` object to be passed as a prop (where it was assumed to be globally accessible).\n\n#### 0.3.0 (2016-02-03)\n\n- Refactor example folder (now accessible on gh-pages)\n- Allow id and className to be passed as parameters\n\n#### 0.2.0 (2016-01-27)\n\n- Add binding for in-port through properties\n- Remove the need of an internal id\n\n#### 0.1.0 (2016-01-26)\n\n- First version, display an existing module and allow binding from `Elm` to `React`\n",
  "readmeFilename": "README.md",
  "_id": "elm-react-component@0.4.1",
  "dist": {
    "shasum": "9edab402c8550712da303bf7b26c6396a181d94d"
  },
  "_from": "elm-react-component@",
  "_resolved": "https://registry.npmjs.org/elm-react-component/-/elm-react-component-0.4.1.tgz"
}
